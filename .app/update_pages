#!/bin/bash

# Usage:  update_pages [-all|-ALL]

# Update all index pages across the site which list posts, tags and categories
# because a new post may have been added.

# can rebuild .html files from .md files (-all), and can also rebuild .md
# files from .mdsh files (-ALL)

# if -all is given, all HTML pages will be re-built, not just the index
# pages (categories, tags, archive, home/recent posts, etc)

# if -ALL is given, all .md files will be rebuilt (from .mdsh), and then
# all pages will be rebuilt as above.

# load the local config file
[ -f .site_config ] && source .site_config

# clean up posts.csv (remove any entries that have missing files)
cp posts.csv /tmp/posts.csv

# read all posts
cut -f1-2 -d'|' /tmp/posts.csv \
  | while read line
    do

      # remove the HTML files of unpublished posts
      if [ "$(echo "$line" | grep "^#")" != "" ];then
        html_file=${line//|//}
        html_file=${html_file//#/}
        html_file=posts/${html_file//.mdsh/.html}
        [ -f $html_file ] && rm $html_file &>/dev/null
        continue
      fi

      mdshfile="${line//|//}"
      mdshfile="${mdshfile//#/}"

      if [ ! -f "posts/$mdshfile" ];then
        # the .mdsh file doesnt exist, remove post from posts list
        echo "Removing: posts/$mdshfile"
        grep -v "^$line" posts.csv > /tmp/posts.csv
        mv /tmp/posts.csv posts.csv

      else
        # mdsh file exists
        # so if the .md file doesnt exist, rebuild it

        # if -all, ....         md -> html
        # if -ALL, .... mdsh -> md -> html
        #
        if [ "$1" = "-all" ] || [ "$1" = "-ALL" ];then
          source_file="$mdshfile"
          html_file="${mdshfile//.mdsh/.html}"
          [ "$1" = "-all" ] && source_file="${mdshfile//.mdsh/.md}"
          # update (rebuild) all posts pages
          echo "Updating: posts/$html_file"
          .app/create_page "posts/$source_file" > "posts/$html_file"
        fi
      fi

    done

echo "Updating: index.html"
post_title="$blog_title - Homepage" . .app/create_page > index.html

# update yearly indexes
for year in $(ls -1 posts)
do
  [ ! -d posts/$year ] && continue
  yearly_posts="<h2>Posts in $year</h2>$(list_posts_in "$year")"
  [ "$yearly_posts" = "" ] && continue
  echo "Updating: posts/$year/index.html"
  touch posts/$year/index.html
  post_title="$blog_title - Posts from $year" \
  post_descr="Here's a list of blog posts written in $year" \
  post_url="$blog_url/posts/$year/" \
  .app/create_page "$yearly_posts" posts/$year/index.html

  # update monthly indexes
  for month in $(ls -1 posts/$year)
  do
    [ ! -d posts/$year/$month ] && continue
    monthly_posts="<h2>Posts in $(date -d $year-$month-01 '+%B') $year</h2>$(list_posts_in "$year/$month")"
    [ "$monthly_posts" = "" ] && continue
    echo "Updating: posts/$year/$month/index.html"
    touch posts/$year/$month/index.html
    post_title="$blog_title - Posts from $(date -d $year-$month-01 '+%B') $year" \
    post_descr="Here's a list of blog posts written in $(date -d $year-$month-01 '+%B') $year" \
    post_url="$blog_url/posts/$year/$month/" \
    .app/create_page "$monthly_posts" > posts/$year/$month/index.html
  done
done


# update 404 page
echo "Updating: 404.html"
post_title="Page not found" \
post_descr="The page you are looking for could not be found." \
.app/create_page '<h2>Page not found</h2>
<p>Sorry, the page you are looking for could not be found!</p>
<hr>
<p>Please use the menu to find something else.</p>' > 404.html


# update main archive page
all_posts="$(cut -f1,2 -d'|' ./posts.csv | grep -v "^#" | tr '|' '/' | sort -u | sort -r)"
if [ "$all_posts" != "" ];then
  echo "Updating: archive.html"
  all_post_html='<h2>Archive</h2><ul class="archive-posts posts">'
  for post in $all_posts
  do
    post_title="$(grep -m1 "|$(basename $post)|" posts.csv | grep -v "^#" | cut -f3 -d'|')"
    post_date=$(dirname "$post")
    post_date="${post_date//posts\//}"
    post="posts/$post"
    [ ! -f "$post" ] && continue
    all_post_html="${all_post_html}<li><span>${post_date}</span> <a href=\"${blog_url}/${post//.mdsh/.html}\">${post_title}</a></li>"
  done
  all_post_html="${all_post_html}</ul>"
  touch archive.html
  post_title="$blog_title - Archive" \
  post_descr="Here's a list of all posts on this blog, listed newest to oldest." \
  post_url="$blog_url/archive.html" \
  .app/create_page "$all_post_html" > archive.html
  # add archive page as posts/index.html  too)
  (cd posts &>/dev/null; ln -s ../archive.html index.html &>/dev/null)
fi


# update authors index page
touch authors/index.html
post_title="$blog_title - Authors" \
post_descr="Here's a list of authors who've written for this site." \
post_url="$blog_url/authors" \
.app/create_page "<h2>Authors</h2>\n$(list_authors)" authors/index.html
# update authors pages
[ ! -d ./authors/ ] && mkdir ./authors/
site_authors="$(grep -v "^#" ./posts.csv | cut -f4 -d'|' | tr ',' '\n' | grep -v "^$" | sort -u)"
cut -f4 -d'|' ./posts.csv | tr ',' '\n' | grep -v "^$" | sort -u | while read author
do
  file="authors/$(.app/slugify.sh "$author").html"
  echo "Updating: $file"
  [ ! -f $file ] && touch $file
  post_title="$blog_title - Posts by $author" \
  post_descr="Here's a list of posts written by $author." \
  post_url="$blog_url/authors/${author}.html" \
  .app/create_page "<h2>Posts by $author</h2>\n$(list_posts_by_author "$author")" $file
done


# update categories index page
echo "Updating: categories/index.html"
touch categories/index.html
post_title="$blog_title - Categories" \
post_descr="Here's a list of posts categories" \
post_url="$blog_url/categories" \
.app/create_page "<h2>Categories</h2>\n$(list_categories)" > categories/index.html

# update category pages
category_posts=''
site_categories="$(grep -v "^#" ./posts.csv | cut -f5 -d'|' ./posts.csv | tr ',' '\n'| tr -d ' ' | sort -u)"
for category in $site_categories
do
  [ "$category" = "" ] && continue
  category_posts="<h2>Category: $category</h2>$(list_posts_in_category "${category}")"
  [ "$category_posts" = "" ] && continue
  echo "Updating: categories/$category.html"
  touch categories/$category.html
  post_title="$blog_title - Posts in category '$category'" \
  post_descr="Here's a list of posts in the category '$category'" \
  post_url="$blog_url/categories/${category}.html" \
  .app/create_page "$category_posts" > categories/$category.html
done



# update contact page
if [ "$blog_email" != "" ];then
  echo "Updating: contact.html"

  contact_twitter=''
  if [ "$blog_twitter" != "" ];then
    contact_twitter="<p>You can also contact me on Twitter <a href=\"https://twitter.com/$blog_twitter\" target=\"_blank\">$blog_twitter</a>.</p>"
  fi

  #"<form action=\"https://formspree.io/you@email.com\" method=\"post\">"                 # formspree
  #"<form action=\"mailto:${blog_email}\" enctype=\"text/plain\">"                        # mailto
  #"<form method=\"POST\" action=\"https://www.briskforms.com/go/XXXXXXXXXXXXXXXXXX\">"   # briskforms

post_title="$blog_title - Contact" \
post_descr="Contact us $blog_title to send a message, question, some feedback or whatever." \
.app/create_page "<h1>Contact</h1><p>Send me a message, question, some feedback or whatever.</p>
$contact_twitter
<form id=\"contact-form\" class=\"contact-form\" action=\"\" method=\"POST\">
  <input name=\"_gotcha\" type=\"text\" style=\"display: none;\"></input>
  <div class=\"email\">
    <label for=\"email\">Email</label>
    <input id=\"email\" type=\"email\" name=\"_replyto\" placeholder=\"Your email\"></input>
  </div>
  <div class=\"subject\">
    <label for=\"subject\">Subject</label>
    <input id=\"subject\" type=\"text\" name=\"_subject\" placeholder=\"Subject here...\"></input>
  </div>
  <div class=\"message\">
    <label for=\"message\">Message</label>
    <textarea id=\"message\" name=\"message\" placeholder=\"Your Message...\"></textarea>
  </div>
  <button id=\"send\" type=\"submit\">Send</button>
</form>
<script type=\"text/javascript\">
  // build the contact string
  var str = '${blog_email//@/__ __}';
  str = str.replace('__ __', '@');
  // add it to the page
  document.getElementById('contact-form').setAttribute('action', 'https://formspree.io/' + str);
</script>" > contact.html
fi

# search page
echo "Updating: search.html"
post_title="$blog_title - Search" \
post_descr="Search this website for relevant post and articles" \
.app/create_page "<div class=\"search-results\">$(while read post
do
  title="$(grep '# title' "posts/$post" | cut -f2-99 -d':'| sed 's/^ *//')"
  descr="$(grep '# descr' "posts/$post" | cut -f2-99 -d':'| sed 's/^ *//')"
  tags="$(grep  '# tags'  "posts/$post" | cut -f2-99 -d':'| sed 's/^ *//')" #"
  url="${blog_url}/posts/${post//.mdsh/.html}"

  echo "<div class=\"result\">"
  echo "  <a href=\"$url\">$title</a>"
  echo "  <div>$descr</div>"
  echo "  <div>${tags//,/, }</div>"
  echo "</div>"
done<<<$(cut -f1,2 -d'|' posts.csv | grep -v "^#" | tr '|' '/' | sort -r))</div>" > search.html #"


# update tags index page
echo "Updating: tags/index.html"
touch tags/index.html
post_title="$blog_title - Tags" \
post_descr="Here's a list of all tags on the site, to help you find some relevant content." \
post_url="$blog_url/tags" \
.app/create_page "<h2>Tags</h2>\n$(list_tags)" > tags/index.html

# update tags pages
site_tags="$(grep -v "^#" ./posts.csv | cut -f6 -d'|' | tr ',' '\n'| tr -d ' ' | sort -u | uniq)"
for tag in $site_tags
do
  [ "$tag" = "" ] && continue
  tagged_posts="<h2>Tag: $tag</h2>$(list_posts_matching_tag "$tag")"
  [ "$tagged_posts" = "" ] && continue
  echo "Updating: tags/$tag.html"
  touch tags/$tag.html
  post_title="$blog_title - Posts matching '$tag'" \
  post_descr="Here's a list of posts matching the tag '$tag'" \
  post_url="$blog_url/tags/${tag}.html" \
  .app/create_page "$tagged_posts" > tags/$tag.html
done

echo "Updating: feed.rss"
.app/create_rss posts/ > feed.rss

# minify the HTML and CSS
echo
.app/minify

echo
echo "Finished."

exit 0
