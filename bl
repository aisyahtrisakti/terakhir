#!/bin/bash

current_year=$(date -u +"%Y")

# load the users config file from $HOME
[ -f $HOME/.bl/config ] && source $HOME/.bl/config
# load the local config file
[ -f .site_config ] && source .site_config

# set default blog options .. the syntax below sets the variables
# if not yet set, therefore they can be overidden in the config
# files above
: ${blog_title:-"My blog"}
: ${blog_language:-"en"}
: ${blog_descr:-"My wonderful blog about lots of things."}
: ${blog_keywords:-"blog, news, feed, latest updates"}
: ${blog_categories:-"bash, shell, javascript, css, programming, puppy linux"}
: ${blog_url:-"http://localhost"}  # no trailing slash
: ${blog_author:-"John Doe"}
: ${blog_email:-"foo@bar.com"}
: ${blog_twitter:-"@foobar"}
: ${blog_fonts:-"Ubuntu:400,400i,700|Inconsolata:400,400i,700|Monaco:400,400i,700&subset=latin"}
: ${blog_js_deps:-"cash-dom "}
: ${blog_google_analytics_id:-""}

################################################################################

function setup {
  # shared site assets
  mkdir -p ./assets/{css,img,js}
  # categories pages
  mkdir -p ./categories/
  for category in $blog_categories
  do
    ./create_page > ./categories/${category}.html "$(list_categories)"
  done
  # blog post pages
  mkdir -p ./posts/$current_year/{01,02,03,04,05,06,07,08,09,10,11,12}/
  # tags pages
  mkdir -p ./tags/
  # create the main index page for the site.. it will list recent posts
  ./create_page > index.html
}

function list_related_pages {
  # as above, but pages with matching tags, most tags matched at the top:
  # then list each as
  # <ul class="related-posts">
  #   <li><a href="posts/$post_date/$post_title">$post_title</a></li>
  # </ul>
  :
}

function list_categories {
  echo '<ul class="categories">'
  OLDIFS=$IFS
  IFS=,
  for category in $(echo "${blog_categories}" | sed 's/, /,/g')
  do
    category="${category//  /}"
    category="${category//^ /}"
    category="${category// $/}"
    echo '  <li><a href="categories/'$(./slugify.sh ${category})'.html">'${category}'</a></li>'
  done
  IFS=$OLDIFS
  echo '</ul>'
}

function list_prev_and_next_pages {
  local current_post="$(grep "|${1//.md/}.md|" ./posts.csv)"
  local prev_current_next_posts="$(grep -A1 -B1 "|${1//.md/}.md|" ./posts.csv | grep -v "$current_post")"
  if [ "$prev_current_next_posts" = "" ];then
    prev_current_next_posts="$(grep -A1 -B1 "|${1//.md/}|" ./posts.csv)"
  fi
  local prev_post=$(echo "$prev_current_next_posts" | head -1)
  local next_post=$(echo "$prev_current_next_posts" | tail -1)

  local prev_date="$(echo "$prev_post" | cut -f1 -d'|')"
  local next_date="$(echo "$next_post" | cut -f1 -d'|')"
  local prev_slug="$(echo "$prev_post" | cut -f2 -d'|')"
  local next_slug="$(echo "$next_post" | cut -f2 -d'|')"
  local prev_title="$(echo "$prev_post" | cut -f3 -d'|')"
  local next_title="$(echo "$next_post" | cut -f3 -d'|')"

  echo '<ul class="prev-next-posts">'
  echo '  <li class="prev_post"><a href="posts/'$prev_date'/'${prev_slug//.md/}'.html">'$prev_title'</a></li>'
  if [ "$next_title" != "$prev_title" ];then
    echo '  <li class="next_post"><a href="posts/'$next_date'/'${next_slug//.md/}'.html">'$next_title'</a></li>'
  fi
  echo '</ul>'
}


function generate_rss_feed {
  :
}

function generate_search_page {
  :  # fuzzy filtering (like my ProjectCMS lang page)
}

function generate_page_header {
  # from post meta...
  # include post title
  # then author, datetime, cateogry, time to read
  :
}

function generate_page_body {
  #
  # usage: generate_page_body <post|recent|related|category|tag>
  #

  # do one of these:
   # generate a blog post from markdown,
   # or run mdshell to create a new postm
   # or list most recent posts,
   # or list related pages,
   # or list posts matching category,
   # or list posts matching tag.
   :
}

function git_add_files {
  # stage the given files.. If no file given, commit all files
  :
}

function git_commit_files {
  # commit the given files.. If no file given, commit all files
  :
}

function git_revert_files {
  # revert the given files ($1)to the given version ($2)
  :
}

function git_push_commit {
  # push the latest commit to GitHub
  :
}

if [ "$1" != "" ];then $1 $2 $3 $4; fi
