#!/bin/bash

# Script for creating HTML pages from markdown files or HTML strings

# load the local config file
[ -f .site_config ] && source .site_config

post_title=''
post_slug=''
post_category=''
post_created=''
post_time_to_read=''
post_url=''
markdown=''
markdown_meta=''
markdown_body=''
body_html=''
output_file=''
current_date="$(date)"
timestamp=$(date +%s)

# we will write to file if $2 is a file, else to stdout
if [ -f "$2" ];then
  output_file="$2"
fi

################################################################################

# Usage:  set_post_info path/to/post.mdsh
#
#         Used by other functions to set the post info used in various
#         bits of generated HTML.

function set_post_info {
  local md_meta
  # get the meta info from the .mdsh file
  if [ -f "${1//.mdsh/}.mdsh" ];then
    md_meta="$(cat "${1//.mdsh/}.mdsh")"
  elif [ -f "${1//.md/}.mdsh" ];then
    md_meta="$(cat "${1//.md/}.mdsh")"
  else
    return 1
  fi
  # remove post meta data and keep only the body
  md_meta="${md_meta%---*}"
  # set some page specific meta info that will end up in the HTML
  post_title="$(echo "$md_meta"        | grep -m1 '# title'       | cut -f2 -d':' | sed 's/^ *//')"
  post_slug="$(echo "$md_meta"         | grep -m1 '# slug '       | cut -f2 -d':' | sed 's/^ *//')"
  post_descr="$(echo "$md_meta"        | grep -m1 '# description' | cut -f2 -d':' | sed 's/^ *//')"
  post_category="$(echo "$md_meta"     | grep -m1 '# category'    | cut -f2 -d':' | sed 's/^ *//' | cut -f1 -d',')"
  post_created="$(echo "$md_meta"      | grep -m1 '# created'     | cut -f2 -d':' | sed 's/^ *//')"
  post_time_to_read="$(echo "$md_meta" | grep -m1 '# time to read'| cut -f2 -d':' | sed 's/^ *//')"
  post_tags="$(echo "$md_meta"         | grep -m1 '# tags'        | cut -f2 -d':' | sed 's/^ *//')"
  post_language="$(echo "$md_meta"     | grep -m1 '# language'    | cut -f2 -d':' | sed 's/^ *//')"
  post_author="$(echo "$md_meta"       | grep -m1 '# author'      | cut -f2 -d':' | sed 's/^ *//')"
  post_twitter="$(echo "$md_meta"      | grep -m1 '# twitter'     | cut -f2 -d':' | sed 's/^ *//')"
  post_js_deps="$(echo "$md_meta"      | grep -m1 '# JS deps'     | cut -f2 -d':' | sed 's/^ *//')"
  post_url="${blog_url}/posts/$post_created/${post_slug}.html"
}


################################################################################

#
# functions for building HTML pages
#

# create an HTML page
function create_page_html {
  local lang="${blog_language:-en}"
  local site_header="$(print_site_header)"
  local prev_and_next_posts=''
  echo "<!DOCTYPE html>
<!--[if lte IE 6]><html lang=\"$lang\" class=\"preIE7 preIE8 preIE9 preIE11\"><![endif]-->
<!--[if IE 7]><html lang=\"$lang\" class=\"preIE8 preIE9 preIE11\"><![endif]-->
<!--[if IE 8]><html lang=\"$lang\" class=\"preIE9 preIE11\"><![endif]-->
<!--[if IE 9]><html lang=\"$lang\" class=\"preIE11\"><![endif]-->
<!--[if IE 10]><html lang=\"$lang\" class=\"preIE11\"><![endif]-->
<!--[if gte IE 11]><!--><html lang=\"$lang\"><!--<![endif]-->"
  echo "<head>"
  print_site_meta
  print_site_inline_styles
  print_site_stylesheets
  print_site_javascripts
  echo "</head>"
  echo "<body>"
  echo '<div class="main-container">'
  echo '<div class="body-container">'
  echo "$site_header"
  echo '<div id="content" class="post-content">'
  echo -e "$body_html"
  echo "</div>"
  print_post_footer
  echo "</div>"
  print_site_footer
  echo "</div>"
  echo "</body>"
  echo "</html>"
}


function print_site_meta {
  local page_title="$blog_title"
  # set a nice page title
  if [ "$post_title" != "" ];then
    page_title="$post_title"
  fi
  echo '<meta charset="utf-8">
<!-- browser/device compatibility stuff -->
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta http-equiv="x-dns-prefetch-control" content="on">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="HandheldFriendly" content="True"/>
<meta name="format-detection" content="telephone=no">
<!-- page info -->
<title>'${page_title}'</title>
<meta name="description" content="'${post_descr:-$blog_descr}'">
<meta name="keywords" content="'${post_tags:-${blog_keywords}}'">
<meta name="news_keywords" content="'${post_tags:-${blog_keywords}}'">
<meta name="subject" content="blog, '${blog_categories}'">
<meta name="generator" content="bl" />
<meta name="medium" content="blog">
<meta name="copyright" content="&copy; '${blog_title}'">
<meta name="language" content="'${post_language:-$blog_language}'">
<meta name="robots" content="index,follow">
<meta name="topic" content="'${blog_categories}'">
<meta name="owner" content="'${post_author:-$blog_author}'">
<meta name="pagename" content="'${page_title}'">
 <!-- Apple -->
<meta name="apple-mobile-web-app-capable" content="yes">
<!-- Facebook -->
<meta property="og:title" content="'${page_title}'">
<meta property="og:description" content="'${post_descr:-$blog_descr}'">
<meta property="og:url" content="'${post_url:-$blog_url}'">
<meta property="og:site_name" content="'${page_title}'">
<meta property="og:type" content="article">
<meta property="og:locale" content="'${post_language:-$blog_language}'">
<meta property="og:image" content="'${blog_url}'/assets/icons/rss.png">
<meta property="article:published_time" content="'${post_created:-$current_date}'">
<!-- Twitter -->
<meta name="twitter:card" content="summary" />
<meta name="twitter:title" content="'${page_title}'" />
<meta name="twitter:site" content="'${post_twitter:-$blog_twitter}'" />
<meta name="twitter:image" content="'${blog_url}'/assets/icons/rss.png" />
<!-- Linked data -->
<script id="meta-ld" type="application/ld+json">
{
  "@context": "http://schema.org/",
  "@type": "Article",
  "headline": "'${post_title:-$blog_title}'",
  "headlineAlternative": "'${post_title:-$blog_title}'",
  "datePublished": "'${post_created:-$current_date}'",
  "dateModified": "'$current_date'",
  "description": "'${post_descr:-$blog_descr}'",
  "keywords": "'${post_tags:-$blog_keywords}'",
  "image": {
    "@type": "ImageObject",
    "height": "512",
    "width": "512",
    "url": "'${blog_url}'/assets/icons/android-chrome-512x512.png"
  },
  "author": "'${post_author:-$blog_author}'",
  "publisher": {
    "@type": "Organization",
    "logo": {
      "@type": "ImageObject",
      "url": "'${blog_url}'/assets/icons/android-chrome-512x512.png"
    },
    "name": "'${blog_title}'"
  },
  "mainEntityOfPage": "'${post_url:-$blog_url}'",
  "articleBody": "'${post_title:-$blog_title}' - '${post_descr:-$blog_descr}'"
}
</script>
'
  if [ "${blog_google_analytics_id}" != "" ];then
    echo '<!-- Google analytics (optional) -->'
    echo '<meta name="google-analytics" content="'${blog_google_analytics_id}'">'
  fi
  echo '
<!-- RSS feed -->
<link rel="alternate" type="application/rss+xml" title="Subscribe to '${blog_title}'" href="'${blog_url}'/feed.rss" />
<!-- SEO stuff -->
<link rel="author" href="/humans.txt" />
<link rel="canonical" href="'${blog_url}'/">
<!-- App icons and favicons -->
<link rel="manifest" href="'${blog_url}'/manifest.webmanifest?v='$timestamp'">
<link rel="icon" type="image/vnd.microsoft.icon" href="'${blog_url}'/assets/icons/favicon.ico?v='$timestamp'">
<link rel="apple-touch-icon" sizes="180x180" href="'${blog_url}'/assets/icons/apple-touch-icon.png?v='$timestamp'">
<link rel="shortcut icon" href="'${blog_url}'/assets/icons/favicon.ico?v='$timestamp'">
<link rel="icon" type="image/png" sizes="16x16" href="'${blog_url}'/assets/icons/favicon-16x16.png?v='$timestamp'">
<link rel="icon" type="image/png" sizes="32x32" href="'${blog_url}'/assets/icons/favicon-32x32.png?v='$timestamp'">
<link rel="icon" type="image/png" sizes="192x192" href="'${blog_url}'/assets/icons/android-chrome-192x192.png?v='$timestamp'">
<link rel="mask-icon" color="#444444" href="'${blog_url}'/assets/icons/safari-pinned-tab.svg?v='$timestamp'">
<meta name="msapplication-TileColor" content="#ffffff">
<meta name="msapplication-config" content="'${blog_url}'/assets/icons/browserconfig.xml?v='$timestamp'">
<meta name="theme-color" content="#101010">
<!-- Fallback app name, for legacy browsers -->
<meta name="application-name" content="'${blog_title}'">
'
}

function print_site_inline_styles {
  echo '<style>
  body, input, select, textarea, button {
    font-family: Ubuntu, serif;
    font-size: 16px;
  }
  pre, code {
    font-family: Inconsolata, Monaco, monospace, serif;
    font-size: 14px;
  }
</style>'
}

function print_site_stylesheets {
  echo '<link rel="stylesheet" href="'${blog_url}'/assets/css/main.css?v='$timestamp'">'
  local filename="$(basename "$output_file" 2>/dev/null)"
  filename="assets/css/${filename//.html/.css}"
  if [ -f "$filename" ];then
    echo '<link rel="stylesheet" href="'${blog_url}'/'"${filename}"'?v='$timestamp'">'
  fi
  echo '<link rel="stylesheet" href="//fonts.googleapis.com/css?family='${blog_fonts}'">'
}

function print_site_javascripts {
  # optional google analytics
  if [ "$blog_google_analytics_id" != '' ];then
    echo '<!-- google analytics -->
<scrip id="google-analytics">
 var _gaq = _gaq || [];
 _gaq.push(["_setAccount", "'${blog_google_analytics_id:-none}'"]);
 _gaq.push(["_trackPageview"]);
 (function(){
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
 })();
</script>'
  fi
  # get JS deps from unpkg
  local js_deps="$blog_js_deps"
  # if building a post, append the post specific deps
  if [ "$post_js_deps" != "" ];then
    js_deps="$blog__js_deps $post_js_deps"
  fi
  # add JS packages from unpkg.com
  for pkgname in $(echo "$js_deps" | tr ',' ' ' | sort -u)
  do
    echo '<script class="unpkg" id="unpkg-'$pkgname'" defer src="//unpkg.com/'$pkgname'"></script>'
  done
  # add site-wide app.js, if it exists
  [ -f ./assets/js/app.js ] && echo '<script id="appjs" defer src="'$blog_url'/assets/js/app.js?v='$timestamp'"></script>'
  # custom JS for each page
  local filename="$(basename "$output_file" 2>/dev/null)"
  filename="assets/js/${filename//.html/.js}"
  if [ -f "$filename" ];then
    echo '<script id="js-'$filename'" defer src="'${blog_url}'/'"${filename}"'?v='$timestamp'"></script>'
  fi
}

function print_site_header {
  echo '<div class="page-header">'
  echo '<h1><a href="'${blog_url}'/index.html">'$blog_title'</a></h1>'
  # enable site search
  if [ "$(echo "$blog_js_deps" | grep 'jets')" != "" ];then
    echo '<input type="search" class="site-search" id="site-search" placeholder="search.." />'
  fi
  echo '<a class="off-screen skip-to-content" href="#content">Skip to content</a>'
  echo '<ul>'

  # include index page(s) .. homepage first, then the others
  #echo '<li><a href="'${blog_url}'/index.html">home</a></li>'
  index_pages=$(ls -1 *.html)
  for index_page in $(echo "$index_pages" | grep -vE 'index.html|404.html|^_*.html')
  do
    index_name="${index_page//.html/}"
    echo '<li><a href="'${blog_url}'/'$index_page'">'$index_name'</a></li>'
  done

  # include individual categories
  #local site_categories="$(cut -f5 -d'|' ./posts.csv | tr ',' '\n' | sort -u)"
  #for category in $site_categories
  #do
  #  echo '<li><a href="'${blog_url}'/categories/'$category'.html">'$category'</a></li>'
  #done

  echo '</ul>'
  echo '</div>'
}

################################################################################

function print_post_header {
  # exit if we are not building a blog post
  [ "$post_slug" = "" ] && return 0

  echo '<div class="post-header">'
  echo '<div class="post-meta">'
  echo '<span class="category"><a href="'${blog_url}'/categories/'"${post_category}"'.html">'"${post_category}"'</a></span>'
  echo '<span class="time-to-read">'"${post_time_to_read}"'</span>'
  echo '<span class="date">'"$post_created"'</span>'
  echo '<span class="author"><a href="'$blog_url'/authors/'"$(./slugify.sh ${post_author:-$blog_author})"'.html">'"${post_author:-$blog_author}"'</a></span>'
  echo '<span class="twitter"><a href="https://twitter.com/'$blog_twitter'" target="_blank">'"${post_twitter:-$blog_twitter}"'</a></span>'
  echo '<div class="tags">'
  for tag in ${post_tags//,/ }
  do
    echo '<span><a href="'${blog_url}'/tags/'"${tag}"'.html">'"$tag"'</a></span>'
  done
  echo '</div>'
  echo '</div>'
  echo '</div>'
}

function print_post_footer {
  # exit if we are not building a blog post
  [ "$post_slug" = "" ] && return 0

  echo '<div class="post-footer">'
  echo '<div class="post-meta">'
  echo '<span class="category"><a href="'${blog_url}'/categories/'"${post_category}"'.html">'"${post_category}"'</a></span>'
  echo '<span class="time-to-read">'"${post_time_to_read}"'</span>'
  echo '<span class="date">'"$post_created"'</span>'
  echo '<span class="author"><a href="'$blog_url'/authors/'"$(./slugify.sh ${post_author:-$blog_author})"'.html">'"${post_author:-$blog_author}"'</a></span>'
  echo '<span class="twitter"><a href="https://twitter.com/'$blog_twitter'" target="_blank">'"${post_twitter:-$blog_twitter}"'</a></span>'
  echo '<div class="tags">'
  for tag in ${post_tags//,/ }
  do
    echo '<span><a href="'${blog_url}'/tags/'"${tag}"'.html">'"$tag"'</a></span>'
  done
  echo '</div>'
  echo '</div>'
  if [ "$post_slug" != "" ];then
    echo "$(list_prev_and_next_posts "${post_slug}.mdsh")"
  fi
  echo '</div>'
}


function print_site_footer {
  echo '<div class="footer">'
  echo "<p>${blog_footer}</p>"
  echo '</div>'
}

################################################################################

#
# functions for listing site categories and tags
#

function list_categories {
  echo '<ul class="categories-list">'
  for category in $(cut -f5 -d'|' ./posts.csv | tr ',' '\n' | sort -u)
  do
    post_count=$(grep -l "# category: .*$category" posts/*/*/*/*.mdsh | sort -u | wc -l 2>/dev/null)
    [ "$post_count" != '' ] && post_count="<span class=\"post-count\">(${post_count// /})</span>"
    echo '<li><a href="'${blog_url}'/categories/'$(./slugify.sh "${category}")'.html">'${category}'</a> '$post_count'</li>'
  done
  echo '</ul>'
}

function list_tags {
  echo '<ul class="tags-list">'
  for tag in $(cut -f6 -d'|' ./posts.csv | tr ',' '\n' | tr ' ' '\n' | sort -u)
  do
    post_count=$(grep -lRE "# tags.*$tag[, ]?" posts/*/*/*/*.mdsh |sort -u |  wc -l 2>/dev/null)
    [ "$post_count" != '' ] && post_count="<span class=\"post-count\">(${post_count// /})</span>"
    echo '<li><a href="'${blog_url}'/tags/'$(./slugify.sh "${tag}")'.html">'${tag}'</a> '$post_count'</li>'
  done
  echo '</ul>'
}

function list_authors {
  echo '<ul class="authors-list">'
  for author in $(cut -f4 -d'|' ./posts.csv | tr ',' '\n' grep -v "^$" | sort -u)
  do
    post_count=$(grep -lRE "# author.*$author[,]?" posts/*/*/*/*.mdsh |sort -u |  wc -l 2>/dev/null)
    [ "$post_count" != '' ] && post_count="<span class=\"post-count\">(${post_count// /})</span>"
    echo '<li><a href="'${blog_url}'/authors/'$(./slugify.sh "${author}")'.html">'${author}'</a> '$post_count'</li>'
  done
  echo '</ul>'
}

################################################################################

#
# functions for listing posts in various ways
#

function print_post_preview {
  [ ! "$1" ] && return 1

   # $1 is the mdsh file
   set_post_info "$1"

  # exit if we are not building a blog post
  [ "$post_slug" = "" ] && return 0

  echo '<div class="post-preview">'
  echo '<h2><a href="'"${post_url}"'">'"${post_title}"'</a></h2> <time datetime="'"${post_created//\//-}"'">'"${post_created}"'</time>'
  echo '<ul class="post-meta">'
  echo '<li>'"${post_time_to_read}"'</li>'
  echo '<li>'"${post_created}"'</li>'
  echo '<li>'"${post_author}"'</li>'
  echo '<li>'"${post_twitter}"'</li>'
  echo '<li><a href="'${blog_url}'/categories/'"${post_category}"'.html">'"${post_category}"'</a></li>'
  echo '</ul>'
  echo '<ul class="tags">'
  for tag in ${post_tags//,/ }
  do
    echo '<li><a href="'${blog_url}'/tags/'${tag}'.html">'${tag}'</a></li>'
  done
  echo '</ul>'
  # show only a summary (using the meta description)
  #echo '<p>'"${post_descr}"'</p>'
  # show full post content, excluding main header (already in post preview)
  echo "$(cat posts/$post_created/${post_slug}.md | grep -v '^## ' | while IFS= read -er line
    do
      if [[ "$line" =~ '```' ]];then
        [ "$in_code_block" = true  ] && in_code_block=false  || in_code_block=true
        [ "$in_code_block" = false ] && line='</code></pre>' || line='<pre><code>'
      fi
      echo -e "$line"
    done | ./markdown.pl | grep -v '<h2>')"
  echo '</div>'
}

function list_posts_in {
  [ -z "$1" ] && return 1
  local post_dir="$1"
  local matching_posts="$(grep "^$post_dir/" posts.csv | cut -f1,2 -d'|' | tr '|' '/' | sort -r)"
#  local matching_posts="$(find $posts_dir -type f -name "*.mdsh" | sort -r)"
  local post_name
  echo '<ul class="posts">'
  for post in $matching_posts
  do
#    post="$(echo "$post" | sed 's|^./||')"
    post_name="$(grep -m1 "|$(basename $post)|" posts.csv | grep -v "^#" | cut -f3 -d'|')"
    [ "$post_name" = "" ] && post_name=$(basename ${post//.mdsh/})
    echo '<li><a href="'${blog_url}'/posts/'${post//.mdsh/.html}'">'${post_name}'</a></li>'
  done
  echo '</ul>'
}

function list_recent_posts {
  # list relative paths to the 10 most recent posts in ./posts dir
  local recent_posts="$(cut -f1,2 -d'|' ./posts.csv | sort -r | head -18 | tr '|' '/' | grep -v "^#")"
  # local recent_posts="$(find posts/ -type f -name "*.md" -exec stat -c "%y %n" {} + | sort -r | head -10 | cut -f4 -d' ')"
  local post_name
  # then list each one
  echo '<ul class="recent-posts posts">'
  for post in $recent_posts
  do
    post_name="$(grep -m1 "|$(basename $post)|" posts.csv | grep -v "^#" | cut -f3 -d'|')"
    [ "$post_name" = "" ] && post_name=$(basename ${post//.mdsh/})
    echo '<li><a href="'${blog_url}'/posts/'${post//.mdsh/.html}'">'${post_name}'</a></li>'
  done
  echo '</ul>'
}

function list_posts_by_author {
  local author="$1"
  matching_posts="$(grep -lRE "# author.*$author[, ]?" posts/*/*/*/*.mdsh | sort -r)"
  echo '<ul class="posts-by-author posts">'
  for post in $matching_posts
  do
    post_name="$(grep -m1 "|$(basename $post)|" posts.csv | grep -v "^#" | cut -f3 -d'|')"
    echo -n '<li><a href="'${blog_url}'/'${post//.mdsh/.html}'">'$post_name'</a></li>'
  done
  echo '</ul>'
}

function list_posts_matching_tag {
  local tag="$1"
  matching_posts="$(grep -lRE "# tags.*$tag[, ]?" posts/*/*/*/*.mdsh | sort -r)"
  echo '<ul class="posts-matching-tag posts">'
  for post in $matching_posts
  do
    post_name="$(grep -m1 "|$(basename $post)|" posts.csv | grep -v "^#" | cut -f3 -d'|')"
    echo -n '<li><a href="'${blog_url}'/'${post//.mdsh/.html}'">'$post_name'</a></li>'
  done
  echo '</ul>'
}

function list_posts_in_category {
  local category="$1"
  local titles="$(grep "|$category|" ./posts.csv | cut -f1,3 -d'|' | grep -v "^#" | sort -r | cut -f2 -d'|')"

  if [ "$titles" != "" ];then
    echo '<ul class="posts-in-category posts">'
    local OLDIFS=$IFS
    IFS="
"
    for title in $titles
    do
      local created="$(grep -m1 "|$title|" ./posts.csv | cut -f1 -d'|')"
      local slug="$(grep -m1 "|$title|" ./posts.csv | cut -f2 -d'|')"
      local title="$(grep -m1 "|$title|" ./posts.csv | cut -f3 -d'|')"
      echo -n '<li><a href="'${blog_url}'/posts/'$created'/'${slug//.mdsh/}'.html">'$title'</a></li>'
    done
    IFS=$OLDIFS
    echo '</ul>'
  fi
}

function list_prev_and_next_posts {
  local current_post="$(grep "|${1//.mdsh/}.mdsh|" ./posts.csv)"
  local prev_current_next_posts="$(grep -A1 -B1 "|${1//.mdsh/}.mdsh|" ./posts.csv | grep -v "$current_post")"
  if [ "$prev_current_next_posts" = "" ];then
    prev_current_next_posts="$(grep -A1 -B1 "|${1//.mdsh/}|" ./posts.csv)"
  fi
  if [ "$prev_current_next_posts" = "" ];then
    return 1
  fi
  local prev_post=$(echo "$prev_current_next_posts" | head -1)
  local next_post=$(echo "$prev_current_next_posts" | tail -1)

  local prev_date="$(echo "$prev_post" | cut -f1 -d'|')"
  local next_date="$(echo "$next_post" | cut -f1 -d'|')"
  local prev_slug="$(echo "$prev_post" | cut -f2 -d'|')"
  local next_slug="$(echo "$next_post" | cut -f2 -d'|')"
  local prev_title="$(echo "$prev_post" | cut -f3 -d'|')"
  local next_title="$(echo "$next_post" | cut -f3 -d'|')"

  echo '<ul class="prev-next-posts">'
  echo '<li class="prev-post">'
  echo '<span>Previous: </span> '
  echo '<a href="../../../'$prev_date'/'${prev_slug//.mdsh/}'.html">'$prev_title'</a>'
  echo '</li>'
  if [ "$next_title" != "$prev_title" ];then
    echo '<li class="next-post">'
    echo '<span>Next:</span> '
    echo '<a href="../../../'$next_date'/'${next_slug//.mdsh/}'.html">'$next_title'</a>'
    echo '</li>'
  fi
  echo '</ul>'
}

################################################################################

#
# begin processing the given file or string
#

body_html=''
markdown=''

# if we were given an mdsh file, then re-build the markdown file,
# then grab the markdown from that new file
if [ -f "${1//.mdsh/}.mdsh" ];then
  ./mdsh2md "${1//.mdsh/}.mdsh" &>/dev/null
  markdown="$(cat "${1//.mdsh/}.md")"

# if given a markdown file, just grab that markdown
elif [ -f "${1//.md/}.md" ];then
  markdown="$(cat "${1//.md/}.md")"

# get html from string
elif [ "$1" != "" ] && [ "$1" != "-all" ];then
  body_html="$(echo -e "$1")"

# get html list of recent posts
else
  post_file=''
  body_html=''
  recent_posts="$(cut -f1,2 -d'|' ./posts.csv | sort -r | head -18 | grep -v "^#")"
  for post in $recent_posts
  do
    post_file="posts/${post//|//}"
    body_html="${body_html}$(print_post_preview "$post_file")"
  done
fi

# ignore the -all option that will be passed here by update_pages (if used by user)
if [ "$1" = "-all" ] || [ "$1" = "-ALL" ];then
  post_file=''
  body_html=''
  recent_posts="$(cut -f1,2 -d'|' ./posts.csv | sort -r | head -18 | grep -v "^#")"
  for post in $recent_posts
  do
    post_file="posts/${post//|//}"
    body_html="${body_html}$(print_post_preview "$post_file")"
  done
fi

# if we have markdown, not html, we need to convert it
if [ "$markdown" != "" ];then

  # set some variables to put into the post HTML
  set_post_info "$1"

  #
  # do some pre-processing of the markdown before converting to html
  #
  echo "$markdown" > /tmp/markdown
  echo -n '' > /tmp/fixed_markdown

  # the -er option is needed to preserve newlines in the code blocks, IFS= preserves whitespace
  while IFS= read -er line
  do
    # replace ``` with html pre/code tags, cos the markdown parsers break a lot
    if [[ "$line" =~ '```' ]];then
      code_class=''
      code_lang="$(echo ${line//\`\`\`/})"
      [ "$code_lang" != "" ] && code_class=" class=\"${code_lang}\""
      [ "$in_code_block" = true  ] && in_code_block=false  || in_code_block=true
      [ "$in_code_block" = false ] && line="</code></pre>" || line="<pre><code${code_class}>"
    fi
    echo -e "$line" >> /tmp/fixed_markdown
  done<<<$(cat /tmp/markdown)

  # get the pre-processed markdown, we will convert that to html
  [ -s /tmp/fixed_markdown ] && markdown="$(cat /tmp/fixed_markdown)"
  rm /tmp/markdown /tmp/fixed_markdown &>/dev/null

  #body_html="$(md2html.sh /tmp/markdown)" # uses github API

  # check our HTML is not empty or an error (from GitHub API)
  if [ "$body_html" = "" ] || \
     [ "$(echo "$body_html" | grep 'Problems parsing JSON')" != "" ] || \
     [ "$(echo "$body_html" ] grep 'API rate limit exceeded')" != "" ];then
    # convert the markdown to HTML
    body_html="$(echo -e "$markdown" | ./markdown.pl)" # or markdown.sh
  fi

fi

# if we have a post header, add that to the page too
post_header="$(print_post_header)"
if [ "$post_header" != "" ];then
  body_html="${body_html/<\/h2>/</h2>
$post_header}"
fi

#xmessage "$body_html"
if [ -f "$output_file" ];then
  create_page_html > "$output_file"
else
  create_page_html
fi

unset post_title
unset post_slug
unset post_category
unset post_created
unset post_time_to_read
unset post_url
unset markdown
unset markdown_meta
unset markdown_body
unset body_html
unset output_file

################################################################################
